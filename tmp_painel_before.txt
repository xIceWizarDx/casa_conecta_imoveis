?import { Head } from '@inertiajs/react';
import { useEffect, useRef, useState } from 'react';
import { Upload, Trash2, Image as ImageIcon } from 'lucide-react';
import '../../css/oldsite.css';
import Icon from '@/site/icon.jsx';
import Button from '@/site/ui/Button.jsx';
import Input from '@/site/ui/Input.jsx';

type ImageItem = {
  id: number;
  filename: string;
  url: string;
  size: number;
  width?: number | null;
  height?: number | null;
  original_name?: string;
  created_at?: string;
};

function csrfToken(): string {
  return (document.querySelector('meta[name="csrf-token"]') as HTMLMetaElement | null)?.content ?? '';
}

export default function Painel() {
  const [existing, setExisting] = useState<ImageItem[]>([]);
  const [selected, setSelected] = useState<File[]>([]);
  const [previews, setPreviews] = useState<{ name: string; url: string; size: number }[]>([]);
  const [progress, setProgress] = useState<number | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);
  const [viewer, setViewer] = useState<ImageItem | null>(null);

  // Hero slides state
  const [slides, setSlides] = useState<any[]>([]);
  const [form, setForm] = useState({
  ·  id: null as number | null,
  ·  image_id: 0,
  ·  title: '',
  ·  subtitle: '',
  ·  price: '',
  ·  bedrooms: 0,
  ·  bathrooms: 0,
  ·  area: '',
  ·  neighborhood: '',
  ·  is_new: false,
  ·  is_published: true,
  });
  const [activeTab, setActiveTab] = useState<'library' | 'hero'>('hero');
  const [imagePickerOpen, setImagePickerOpen] = useState(false);
  // Featured properties state
  const [featured, setFeatured] = useState<any[]>([]);
  const [featuredForm, setFeaturedForm] = useState({
  ·  id: null as number | null,
  ·  image_id: 0,
  ·  title: '',
  ·  neighborhood: '',
  ·  price: '',
  ·  bedrooms: 0,
  ·  bathrooms: 0,
  ·  area: '',
  ·  type: '',
  ·  features: [] as string[],
  ·  price_range: '',
  ·  is_new: false,
  ·  is_published: true,
  });

  useEffect(() => {
  ·  fetchImages();
  ·  return () => {
  ·    previews.forEach((p) => URL.revokeObjectURL(p.url));
  ·  };
  ·  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
  ·  fetchSlides();
  ·  fetchFeatured();
  }, []);

  async function fetchImages() {
  ·  const res = await fetch('/api/images');
  ·  if (!res.ok) return;
  ·  const data: ImageItem[] = await res.json();
  ·  setExisting(data);
  }

  async function fetchSlides() {
  ·  const res = await fetch('/api/admin/hero-slides');
  ·  if (res.ok) setSlides(await res.json());
  }

  async function fetchFeatured() {
  ·  const res = await fetch('/api/admin/featured-properties');
  ·  if (res.ok) setFeatured(await res.json());
  }

  function onSelect(files: FileList | null) {
  ·  const arr = Array.from(files ?? []);
  ·  setSelected(arr);
  ·  setPreviews((prev) => {
  ·    prev.forEach((p) => URL.revokeObjectURL(p.url));
  ·    return arr.map((f) => ({ name: f.name, url: URL.createObjectURL(f), size: f.size }));
  ·  });
  }

  function onDrop(e: React.DragEvent<HTMLDivElement>) {
  ·  e.preventDefault();
  ·  onSelect(e.dataTransfer.files);
  }

  async function upload() {
  ·  if (!selected.length) return;
  ·  const form = new FormData();
  ·  selected.forEach((f) => form.append('images[]', f));

  ·  setProgress(0);
  ·  await new Promise<void>((resolve, reject) => {
  ·    const xhr = new XMLHttpRequest();
  ·    xhr.open('POST', '/api/images');
  ·    xhr.setRequestHeader('X-CSRF-TOKEN', csrfToken());

  ·    xhr.upload.onprogress = (evt) => {
  ·    ·  if (evt.lengthComputable) {
  ·    ·    const pct = Math.round((evt.loaded * 100) / evt.total);
  ·    ·    setProgress(pct);
  ·    ·  }
  ·    };

  ·    xhr.onload = async () => {
  ·    ·  if (xhr.status >= 200 && xhr.status < 300) {
  ·    ·    setSelected([]);
  ·    ·    setPreviews((prev) => {
  ·    ·    ·  prev.forEach((p) => URL.revokeObjectURL(p.url));
  ·    ·    ·  return [];
  ·    ·    });
  ·    ·    setProgress(null);
  ·    ·    await fetchImages();
  ·    ·    resolve();
  ·    ·  } else {
  ·    ·    setProgress(null);
  ·    ·    alert('Fa?a no upload');
  ·    ·    reject(new Error('Upload failed'));
  ·    ·  }
  ·    };

  ·    xhr.onerror = () => {
  ·    ·  setProgress(null);
  ·    ·  alert('Fa?a no upload');
  ·    ·  reject(new Error('XHR error'));
  ·    };

  ·    xhr.send(form);
  ·  });
  }

  // Featured handlers
  function resetFeaturedForm() {
  ·  setFeaturedForm({ id: null, image_id: 0, title: '', neighborhood: '', price: '', bedrooms: 0, bathrooms: 0, area: '', type: '', features: [], price_range: '', is_new: false, is_published: true });
  }

  async function saveFeatured() {
  ·  const payload: any = { ...featuredForm };
  ·  delete payload.id;
  ·  const res = await fetch(featuredForm.id ? `/api/admin/featured-properties/${featuredForm.id}` : '/api/admin/featured-properties', {
  ·    method: featuredForm.id ? 'PUT' : 'POST',
  ·    headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrfToken() },
  ·    body: JSON.stringify(payload),
  ·  });
  ·  if (res.ok) {
  ·    await fetchFeatured();
  ·    resetFeaturedForm();
  ·  } else {
  ·    alert('Erro ao salvar destaque');
  ·  }
  }

  async function publishToggleFeatured(id: number) {
  ·  const res = await fetch(`/api/admin/featured-properties/${id}/publish`, { method: 'PATCH', headers: { 'X-CSRF-TOKEN': csrfToken() } });
  ·  if (res.ok) fetchFeatured();
  }

  async function removeFeatured(id: number) {
  ·  if (!confirm('Excluir este im?vel em destaque?')) return;
  ·  const res = await fetch(`/api/admin/featured-properties/${id}`, { method: 'DELETE', headers: { 'X-CSRF-TOKEN': csrfToken() } });
  ·  if (res.ok) fetchFeatured();
  }

  async function moveFeatured(index: number, dir: -1 | 1) {
  ·  const list = [...featured];
  ·  const j = index + dir;
  ·  if (j < 0 || j >= list.length) return;
  ·  const t = list[index]; list[index] = list[j]; list[j] = t;
  ·  setFeatured(list);
  ·  const ids = list.map((s) => s.id);
  ·  await fetch('/api/admin/featured-properties/reorder', { method: 'PATCH', headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrfToken() }, body: JSON.stringify({ ids }) });
  }

  async function removeImage(id: number) {
  ·  if (!confirm('Excluir esta imagem?')) return;
  ·  const res = await fetch(`/api/images/${id}`, {
  ·    method: 'DELETE',
  ·    headers: { 'X-CSRF-TOKEN': csrfToken() },
  ·  });
  ·  if (!res.ok) {
  ·    alert('Fa?a ao excluir');
  ·    return;
  ·  }
  ·  await fetchImages();
  }

  function resetForm() {
  ·  setForm({ id: null, image_id: 0, title: '', subtitle: '', price: '', bedrooms: 0, bathrooms: 0, area: '', neighborhood: '', is_new: false, is_published: true });
  }

  async function saveSlide() {
  ·  const payload: any = { ...form };
  ·  delete payload.id;
  ·  const res = await fetch(form.id ? `/api/admin/hero-slides/${form.id}` : '/api/admin/hero-slides', {
  ·    method: form.id ? 'PUT' : 'POST',
  ·    headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrfToken() },
  ·    body: JSON.stringify(payload),
  ·  });
  ·  if (res.ok) {
  ·    await fetchSlides();
  ·    resetForm();
  ·  } else {
  ·    alert('Erro ao salvar anúncio');
  ·  }
  }

  async function publishToggle(id: number) {
  ·  const res = await fetch(`/api/admin/hero-slides/${id}/publish`, { method: 'PATCH', headers: { 'X-CSRF-TOKEN': csrfToken() } });
  ·  if (res.ok) fetchSlides();
  }

  async function removeSlide(id: number) {
  ·  if (!confirm('Excluir este anúncio do hero?')) return;
  ·  const res = await fetch(`/api/admin/hero-slides/${id}`, { method: 'DELETE', headers: { 'X-CSRF-TOKEN': csrfToken() } });
  ·  if (res.ok) fetchSlides();
  }

  async function moveSlide(index: number, dir: -1 | 1) {
  ·  const list = [...slides];
  ·  const j = index + dir;
  ·  if (j < 0 || j >= list.length) return;
  ·  const t = list[index]; list[index] = list[j]; list[j] = t;
  ·  setSlides(list);
  ·  const ids = list.map((s) => s.id);
  ·  await fetch('/api/admin/hero-slides/reorder', { method: 'PATCH', headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrfToken() }, body: JSON.stringify({ ids }) });
  }

  return (
  ·  <div className="old-site min-h-screen bg-background text-foreground">
  ·    <Head title="Painel" />
  ·    <header className="fixed top-0 left-0 right-0 z-40 bg-white/95 backdrop-blur-subtle shadow-subtle">
  ·    ·  <div className="container-responsive">
  ·    ·    <div className="flex items-center justify-between h-16">
  ·    ·    ·  <a href="/" className="flex items-center space-x-3 hover:opacity-80 transition-opacity">
  ·    ·    ·    <div className="w-10 h-10 gradient-primary rounded-lg flex items-center justify-center">
  ·    ·    ·    ·  <Icon name="Home" size={22} color="white" strokeWidth={2.5} />
  ·    ·    ·    </div>
  ·    ·    ·    <div className="hidden sm:block">
  ·    ·    ·    ·  <h1 className="text-lg font-bold text-text-primary">Casa Conecta</h1>
  ·    ·    ·    ·  <p className="text-[11px] text-text-secondary">Imóveis Premium</p>
  ·    ·    ·    </div>
  ·    ·    ·  </a>
  ·    ·    ·  <nav className="hidden md:flex items-center gap-6 text-sm">
  ·    ·    ·    {[
  ·    ·    ·    ·  { name: 'Início', href: '/' },
  ·    ·    ·    ·  { name: 'Sobre Nós', href: '/about-brand-story-credentials' },
  ·    ·    ·    ·  { name: 'FAQ', href: '/faq-comprehensive-buyer-education' },
  ·    ·    ·    ·  { name: 'Painel', href: '/painel' },
  ·    ·    ·    ].map((item) => {
  ·    ·    ·    ·  const isActive = typeof window !== 'undefined' && window.location.pathname === item.href;
  ·    ·    ·    ·  return (
  ·    ·    ·    ·    <a key={item.href} href={item.href} className={`px-3 py-2 rounded-md transition-colors ${isActive ? 'text-primary bg-primary/10' : 'text-text-secondary hover:text-primary hover:bg-primary/5'}`}>
  ·    ·    ·    ·    ·  {item.name}
  ·    ·    ·    ·    </a>
  ·    ·    ·    ·  );
  ·    ·    ·    })}
  ·    ·    ·  </nav>
  ·    ·    </div>
  ·    ·  </div>
  ·    </header>

  ·    <section className="pt-24 pb-4">
  ·    ·  <div className="container-responsive">
  ·    ·    <div className="flex items-center gap-3">
  ·    ·    ·  <div className="w-12 h-12 rounded-lg flex items-center justify-center gradient-primary text-white shadow-subtle">
  ·    ·    ·    <ImageIcon />
  ·    ·    ·  </div>
  ·    ·    ·  <div>
  ·    ·    ·    <h1 className="text-2xl sm:text-3xl font-bold text-text-primary">Painel</h1>
  ·    ·    ·    <p className="text-text-secondary">Gerencie imagens e an?ncios do destaque (Hero).</p>
  ·    ·    ·  </div>
  ·    ·    </div>
  ·    ·  </div>
  ·    </section>

  ·    <main className="pb-16">
  ·    ·  <div className="container-responsive">
  ·    ·    <div className="mb-4">
  ·    ·    ·  <div className="inline-flex gap-2 rounded-lg bg-muted p-1">
  ·    ·    ·    <button className={`px-4 py-2 rounded-md text-sm font-medium ${activeTab==='hero'?'bg-white text-text-primary shadow-subtle':'text-text-secondary hover:text-primary'}`} onClick={() => setActiveTab('hero')}>Hero (an?ncios)</button>
  ·    ·    ·    <button className={`px-4 py-2 rounded-md text-sm font-medium ${activeTab==='library'?'bg-white text-text-primary shadow-subtle':'text-text-secondary hover:text-primary'}`} onClick={() => setActiveTab('library')}>Biblioteca de Imagens</button>
  ·    ·    ·  </div>
  ·    ·    </div>
  ·    ·    {activeTab==='library' && (
  ·    ·    <div className="bg-white rounded-xl shadow-card p-6 sticky top-24">
  ·    ·    ·  <h2 className="text-lg font-semibold mb-3">Upload de Imagens</h2>
  ·    ·    ·  <div onDrop={onDrop} onDragOver={(e) => e.preventDefault()} className="flex flex-col items-center justify-center gap-3 rounded-lg border-2 border-dashed border-border bg-muted/50 p-6 text-center">
  ·    ·    ·    <p className="text-sm text-text-secondary">Arraste imagens aqui ou selecione arquivos</p>
  ·    ·    ·    <div className="flex items-center gap-2">
  ·    ·    ·    ·  <Button type="button" onClick={() => inputRef.current?.click()} iconName="Upload" variant="secondary">
  ·    ·    ·    ·    Selecionar arquivos
  ·    ·    ·    ·  </Button>
  ·    ·    ·    ·  <Input ref={inputRef as any} type="file" accept="image/*" multiple onChange={(e: any) => onSelect(e.target.files)} className="hidden" />
  ·    ·    ·    ·  {progress !== null && <span className="text-sm">{progress}%</span>}
  ·    ·    ·    </div>
  ·    ·    ·  </div>

  ·    ·    ·  {previews.length > 0 && (
  ·    ·    ·    <div className="mt-4">
  ·    ·    ·    ·  <div className="mb-2 text-sm font-medium">Pr?-visualiza??o ({previews.length})</div>
  ·    ·    ·    ·  <div className="grid grid-cols-[repeat(auto-fill,minmax(160px,1fr))] gap-4">
  ·    ·    ·    ·    {previews.map((p) => (
  ·    ·    ·    ·    ·  <div key={p.url} className="property-card overflow-hidden rounded-lg bg-white">
  ·    ·    ·    ·    ·    <img src={p.url} alt={p.name} className="h-36 w-full object-cover" />
  ·    ·    ·    ·    ·    <div className="px-3 py-2">
  ·    ·    ·    ·    ·    ·  <div className="line-clamp-1 text-xs text-text-secondary" title={p.name}>{p.name}</div>
  ·    ·    ·    ·    ·    </div>
  ·    ·    ·    ·    ·  </div>
  ·    ·    ·    ·    ))}
  ·    ·    ·    ·  </div>
  ·    ·    ·    ·  <div className="mt-3">
  ·    ·    ·    ·    <Button onClick={upload} iconName="Upload" variant="success">Enviar</Button>
  ·    ·    ·    ·  </div>
  ·    ·    ·    </div>
  ·    ·    ·  )}
  ·    ·    </div>
  ·    ·    )}

  ·    ·    {activeTab==='library' && (
  ·    ·    <div className="mt-8">
  ·    ·    ·  <div className="flex items-center justify-between mb-3">
  ·    ·    ·    <h2 className="text-lg font-semibold">Imagens enviadas ({existing.length})</h2>
  ·    ·    ·  </div>
  ·    ·    ·  {existing.length === 0 ? (
  ·    ·    ·    <div className="bg-white rounded-xl shadow-card p-10 text-center text-text-secondary">
  ·    ·    ·    ·  Nenhuma imagem enviada ainda.
  ·    ·    ·    </div>
  ·    ·    ·  ) : (
  ·    ·    ·    <div className="grid grid-cols-[repeat(auto-fill,minmax(160px,1fr))] gap-4">
  ·    ·    ·    ·  {existing.map((img) => (
  ·    ·    ·    ·    <div key={img.id} className="group property-card overflow-hidden rounded-lg bg-white">
  ·    ·    ·    ·    ·  <button type="button" onClick={() => setViewer(img)} className="block w-full cursor-zoom-in" title="Clique para visualizar">
  ·    ·    ·    ·    ·    <img src={img.url} alt={img.filename} className="h-36 w-full object-cover" />
  ·    ·    ·    ·    ·  </button>
  ·    ·    ·    ·    ·  <div className="px-3 py-2 flex items-center justify-between gap-2">
  ·    ·    ·    ·    ·    <div className="line-clamp-1 text-xs text-text-secondary" title={img.filename}>{img.filename}</div>
  ·    ·    ·    ·    ·    <Button size="xs" variant="danger" onClick={() => removeImage(img.id)} iconName="Trash2" />
  ·    ·    ·    ·    ·  </div>
  ·    ·    ·    ·    </div>
  ·    ·    ·    ·  ))}
  ·    ·    ·    </div>
  ·    ·    ·  )}
  ·    ·    </div>
  ·    ·    )}

  ·    ·    {/* Gerenciar anúncios do Hero */}
  ·    ·    <div className="mt-4 grid grid-cols-1 lg:grid-cols-2 gap-6">
  ·    ·    <div className="space-y-6">
  ·    ·    <div className="bg-white rounded-xl shadow-card p-6 sticky top-24">
  ·    ·    ·  <div className="flex items-center justify-between mb-4">
  ·    ·    ·    <h2 className="text-lg font-semibold">Anúncios do Hero</h2>
  ·    ·    ·    {form.id && (
  ·    ·    ·    ·  <Button variant="outline" size="sm" onClick={resetForm}>Novo</Button>
  ·    ·    ·    )}
  ·    ·    ·  </div>

  ·    ·    ·  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
  ·    ·    ·    <div>
  ·    ·    ·    ·  <label className="text-sm font-medium">Imagem</label>
  ·    ·    ·    ·  <select className="mt-1 w-full border border-border rounded-md h-10 px-2" value={form.image_id}
  ·    ·    ·    ·    onChange={(e) => setForm({ ...form, image_id: parseInt(e.target.value || '0', 10) })}>
  ·    ·    ·    ·    <option value={0}>Selecione uma imagem???</option>
  ·    ·    ·    ·    {existing.map((img) => (
  ·    ·    ·    ·    ·  <option key={img.id} value={img.id}>{img.filename}</option>
  ·    ·    ·    ·    ))}
  ·    ·    ·    ·  </select>
  ·    ·    ·    </div>
  ·    ·    ·    <Input label="T?tulo" value={form.title} onChange={(e: any) => setForm({ ...form, title: e.target.value })} required />
  ·    ·    ·    <Input label="Subt?tulo" value={form.subtitle} onChange={(e: any) => setForm({ ...form, subtitle: e.target.value })} />
  ·    ·    ·    <Input label="Valor" value={form.price} onChange={(e: any) => setForm({ ...form, price: e.target.value })} required />
  ·    ·    ·    <Input type="number" label="Quartos" value={form.bedrooms} onChange={(e: any) => setForm({ ...form, bedrooms: parseInt(e.target.value || '0', 10) })} />
  ·    ·    ·    <Input type="number" label="Banheiros" value={form.bathrooms} onChange={(e: any) => setForm({ ...form, bathrooms: parseInt(e.target.value || '0', 10) })} />
  ·    ·    ·    <Input label="Área (m²)" value={form.area} onChange={(e: any) => setForm({ ...form, area: e.target.value })} />
  ·    ·    ·    <Input label="Setor/Bairro" value={form.neighborhood} onChange={(e: any) => setForm({ ...form, neighborhood: e.target.value })} />
  ·    ·    ·    <div className="flex items-center gap-4">
  ·    ·    ·    ·  <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={form.is_new} onChange={(e) => setForm({ ...form, is_new: e.target.checked })} /> Novo</label>
  ·    ·    ·    ·  <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={form.is_published} onChange={(e) => setForm({ ...form, is_published: e.target.checked })} /> Publicado</label>
  ·    ·    ·    </div>
  ·    ·    ·  </div>
  ·    ·    ·  <div className="mt-4">
  ·    ·    ·    <Button onClick={saveSlide} variant="success">{form.id ? 'Salvar altera??es' : 'Publicar no Hero'}</Button>
  ·    ·    ·  </div>

  ·    ·    </div>

  ·    ·    </div>
  ·    ·    <div className="bg-white rounded-xl shadow-card p-6 lg:col-start-2 lg:row-start-1">
  ·    ·    ·  <h3 className="text-base font-semibold mb-4">Lista de An?ncios do Hero</h3>
  ·    ·    ·  <div className="grid grid-cols-1 gap-3">
  ·    ·    ·    {slides.map((s, idx) => (
  ·    ·    ·    ·  <div key={s.id} className="flex items-center gap-3 border border-border rounded-md p-3">
  ·    ·    ·    ·    <img src={s.image_url} alt={s.title} className="w-16 h-16 object-cover rounded" />
  ·    ·    ·    ·    <div className="flex-1">
  ·    ·    ·    ·    ·  <div className="font-semibold">{s.title} {s.is_new ? <span className="ml-2 text-xs bg-primary/10 text-primary px-2 py-0.5 rounded">Novo</span> : null}</div>
  ·    ·    ·    ·    ·  <div className="text-sm text-text-secondary">{s.neighborhood}  {s.bedrooms} q  {s.bathrooms} b  {s.area}</div>
  ·    ·    ·    ·    </div>
  ·    ·    ·    ·    <div className="text-sm font-semibold text-primary mr-2">{s.price}</div>
  ·    ·    ·    ·    <div className="flex items-center gap-2">
  ·    ·    ·    ·    ·  <Button size="xs" variant="outline" onClick={() => setForm({
  ·    ·    ·    ·    ·    id: s.id, image_id: s.image_id, title: s.title, subtitle: s.subtitle || '', price: s.price,
  ·    ·    ·    ·    ·    bedrooms: s.bedrooms || 0, bathrooms: s.bathrooms || 0, area: s.area || '', neighborhood: s.neighborhood || '',
  ·    ·    ·    ·    ·    is_new: !!s.is_new, is_published: !!s.is_published,
  ·    ·    ·    ·    ·  })}>Editar</Button>
  ·    ·    ·    ·    ·  <Button size="xs" variant={s.is_published ? 'warning' : 'success'} onClick={() => publishToggle(s.id)}>{s.is_published ? 'Despublicar' : 'Publicar'}</Button>
  ·    ·    ·    ·    ·  <Button size="xs" variant="danger" onClick={() => removeSlide(s.id)}>Excluir</Button>
  ·    ·    ·    ·    ·  <Button size="xs" variant="outline" onClick={() => moveSlide(idx, -1)}>?</Button>
  ·    ·    ·    ·    ·  <Button size=" xs\ variant=\outline\ onClick={() => moveSlide(idx, -1)}>?</Button>
 <Button size=\xs\ variant=\outline\ onClick={() => moveSlide(idx, 1)}>?</Button>

  ·    ·    ·    {slides.length === 0 && (
  ·    ·    ·    ·  <div className="text-sm text-text-secondary">Nenhum anúncio cadastrado.</div>
  ·    ·    ·    )}
  ·    ·    ·  </div>
  ·    ·    </div>

  ·    ·    \r\n{/* Im?veis em Destaque */}
  ·    ·    <div className="bg-white rounded-xl shadow-card p-6">
  ·    ·    ·  <div className="flex items-center justify-between mb-4">
  ·    ·    ·    <h2 className="text-lg font-semibold">Im?veis em Destaque</h2>
  ·    ·    ·    {featuredForm.id && (
  ·    ·    ·    ·  <Button variant="outline" size="sm" onClick={resetFeaturedForm}>Novo</Button>
  ·    ·    ·    )}
  ·    ·    ·  </div>

  ·    ·    ·  <div className="flex flex-col gap-6">
  ·    ·    ·    {/* Lista de destaques */}
  ·    ·    ·    <div className="order-2 grid gap-3">
  ·    ·    ·    ·  {featured.map((f, idx) => (
  ·    ·    ·    ·    <div key={f.id} className="flex items-center gap-3 border border-border rounded-md p-3">
  ·    ·    ·    ·    ·  <img src={f.image_url} alt={f.title} className="w-16 h-16 object-cover rounded" />
  ·    ·    ·    ·    ·  <div className="flex-1">
  ·    ·    ·    ·    ·    <div className="font-semibold flex items-center gap-2">{f.title} {f.is_new ? <span className="text-xs px-2 py-0.5 rounded bg-secondary text-secondary-foreground">Novo</span> : null} <span className={`text-xs px-2 py-0.5 rounded ${f.is_published ? 'bg-success text-success-foreground' : 'bg-muted text-text-secondary'}`}>{f.is_published ? 'Publicado' : 'Rascunho'}</span></div>
  ·    ·    ·    ·    ·    <div className="text-xs text-text-secondary">{f.neighborhood}  ?  {f.bedrooms} q  ?  {f.bathrooms} b  ?  {f.area}</div>
  ·    ·    ·    ·    ·  </div>
  ·    ·    ·    ·    ·  <div className="text-sm font-semibold text-primary mr-2 min-w-[110px] text-right">{f.price}</div>
  ·    ·    ·    ·    ·  <div className="flex items-center gap-2">
  ·    ·    ·    ·    ·    <Button size="xs" variant="outline" onClick={() => setFeaturedForm({
  ·    ·    ·    ·    ·    ·  id: f.id, image_id: f.image_id, title: f.title, neighborhood: f.neighborhood || '', price: f.price,
  ·    ·    ·    ·    ·    ·  bedrooms: f.bedrooms || 0, bathrooms: f.bathrooms || 0, area: f.area || '', type: f.type || '', features: f.features || [], price_range: f.price_range || '', is_new: !!f.is_new, is_published: !!f.is_published
  ·    ·    ·    ·    ·    })}>Editar</Button>
  ·    ·    ·    ·    ·    <Button size="xs" variant={f.is_published ? 'warning' : 'success'} onClick={() => publishToggleFeatured(f.id)}>{f.is_published ? 'Despublicar' : 'Publicar'}</Button>
  ·    ·    ·    ·    ·    <Button size="xs" variant="danger" onClick={() => removeFeatured(f.id)}>Excluir</Button>
  ·    ·    ·    ·    ·    <Button size="xs" variant="outline" onClick={() => moveFeatured(idx, -1)}>?</Button>
  ·    ·    ·    ·    ·    <Button size="xs" variant="outline" onClick={() => moveFeatured(idx, 1)}>?</Button>
  ·    ·    ·    ·    ·  </div>
  ·    ·    ·    ·    </div>
  ·    ·    ·    ·  ))}
  ·    ·    ·    ·  {featured.length === 0 && (
  ·    ·    ·    ·    <div className="text-sm text-text-secondary">Nenhum destaque cadastrado.</div>
  ·    ·    ·    ·  )}
  ·    ·    ·    </div>

  ·    ·    ·    {/* Formul?rio de destaque */}
  ·    ·    ·    <div className="order-1">
  ·    ·    ·    ·  <div className="bg-white rounded-xl shadow-card p-4 sticky top-24">
  ·    ·    ·    ·    <h3 className="text-base font-semibold mb-3">{featuredForm.id ? 'Editar Destaque' : 'Novo Destaque'}</h3>

  ·    ·    ·    ·    <div className="grid grid-cols-1 gap-3">
  ·    ·    ·    ·    ·  <div>
  ·    ·    ·    ·    ·    <label className="text-sm font-medium">Imagem</label>
  ·    ·    ·    ·    ·    <select className="mt-1 w-full border border-border rounded-md h-10 px-2" value={featuredForm.image_id}
  ·    ·    ·    ·    ·    ·  onChange={(e) => setFeaturedForm({ ...featuredForm, image_id: parseInt((e.target as any).value || '0', 10) })}>
  ·    ·    ·    ·    ·    ·  <option value={0}>Selecione uma imagem?</option>
  ·    ·    ·    ·    ·    ·  {existing.map((img) => (
  ·    ·    ·    ·    ·    ·    <option key={img.id} value={img.id}>{img.filename}</option>
  ·    ·    ·    ·    ·    ·  ))}
  ·    ·    ·    ·    ·    </select>
  ·    ·    ·    ·    ·  </div>
  ·    ·    ·    ·    ·  <Input label="T?tulo" value={featuredForm.title} onChange={(e: any) => setFeaturedForm({ ...featuredForm, title: e.target.value })} required />
  ·    ·    ·    ·    ·  <Input label="Setor/Bairro" value={featuredForm.neighborhood} onChange={(e: any) => setFeaturedForm({ ...featuredForm, neighborhood: e.target.value })} />
  ·    ·    ·    ·    ·  <Input label="Valor" value={featuredForm.price} onChange={(e: any) => setFeaturedForm({ ...featuredForm, price: e.target.value })} required />
  ·    ·    ·    ·    ·  <div className="grid grid-cols-3 gap-2">
  ·    ·    ·    ·    ·    <Input type="number" label="Quartos" value={featuredForm.bedrooms} onChange={(e: any) => setFeaturedForm({ ...featuredForm, bedrooms: parseInt(e.target.value || '0', 10) })} />
  ·    ·    ·    ·    ·    <Input type="number" label="Banheiros" value={featuredForm.bathrooms} onChange={(e: any) => setFeaturedForm({ ...featuredForm, bathrooms: parseInt(e.target.value || '0', 10) })} />
  ·    ·    ·    ·    ·    <Input label="?rea (m?)" value={featuredForm.area} onChange={(e: any) => setFeaturedForm({ ...featuredForm, area: e.target.value })} />
  ·    ·    ·    ·    ·  </div>
  ·    ·    ·    ·    ·  <Input label="Tipo (casa, apto, cobertura...)" value={featuredForm.type} onChange={(e: any) => setFeaturedForm({ ...featuredForm, type: e.target.value })} />
  ·    ·    ·    ·    ·  <Input label="Fa?a de pre?o (ex.: 1200000-1800000)" value={featuredForm.price_range} onChange={(e: any) => setFeaturedForm({ ...featuredForm, price_range: e.target.value })} />
  ·    ·    ·    ·    ·  <Input label="Features (separe por v?rgula)" value={featuredForm.features?.join(', ')} onChange={(e: any) => setFeaturedForm({ ...featuredForm, features: (e.target.value || '').split(',').map((s: string) => s.trim()).filter(Boolean) })} />
  ·    ·    ·    ·    ·  <div className="flex items-center gap-4">
  ·    ·    ·    ·    ·    <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={featuredForm.is_new} onChange={(e) => setFeaturedForm({ ...featuredForm, is_new: (e.target as any).checked })} /> Novo</label>
  ·    ·    ·    ·    ·    <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={featuredForm.is_published} onChange={(e) => setFeaturedForm({ ...featuredForm, is_published: (e.target as any).checked })} /> Publicado</label>
  ·    ·    ·    ·    ·  </div>
  ·    ·    ·    ·    </div>
  ·    ·    ·    ·    <div className="mt-4 flex items-center gap-2">
  ·    ·    ·    ·    ·  <Button onClick={saveFeatured} variant="success">{featuredForm.id ? 'Salvar altera??es' : 'Publicar Destaque'}</Button>
  ·    ·    ·    ·    ·  {featuredForm.id && <Button variant="outline" onClick={resetFeaturedForm}>Cancelar</Button>}
  ·    ·    ·    ·    </div>
  ·    ·    ·    ·  </div>
  ·    ·    ·    </div>
  ·    ·    ·  </div>
  ·    ·    </div>

  ·    ·    {viewer && (
  ·    ·    ·  <ImageViewer image={viewer} onClose={() => setViewer(null)} />
  ·    ·    )}
  ·    ·  </div>
  ·    </main>
  ·  </div>
  );
}

function ImageViewer({ image, onClose }: { image: ImageItem; onClose: () => void }) {
  return (
  ·  <div className="fixed inset-0 z-50">
  ·    <div className="absolute inset-0 bg-black/60" onClick={onClose} />
  ·    <div className="absolute inset-0 flex items-center justify-center p-4">
  ·    ·  <div className="bg-white rounded-xl shadow-card max-w-4xl w-full p-3">
  ·    ·    <div className="flex items-center justify-between px-1 py-2 border-b border-border">
  ·    ·    ·  <div className="text-sm font-medium">
  ·    ·    ·    {image.original_name || image.filename}
  ·    ·    ·  </div>
  ·    ·    ·  <Button variant="outline" size="xs" onClick={onClose} iconName="X">Fechar</Button>
  ·    ·    </div>
  ·    ·    <div className="max-h-[80vh] w-full overflow-auto p-2">
  ·    ·    ·  <img src={image.url} alt={image.filename} className="mx-auto h-auto max-h-[75vh] w-auto max-w-full rounded-md" />
  ·    ·    </div>
  ·    ·  </div>
  ·    </div>
  ·  </div>
  );
}








