import ImagePreview from '@/components/ImagePreview';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import HeaderStandalone from '@/main/components/ui/HeaderStandalone';
import type { BreadcrumbItem } from '@/types';
import { Head } from '@inertiajs/react';
import { useEffect, useState } from 'react';
import '../../css/oldsite.css';

// Typed route helpers generated by Wayfinder
import * as FeaturedActions from '@/actions/App/Http/Controllers/FeaturedPropertyController';
import * as HeroActions from '@/actions/App/Http/Controllers/HeroSlideController';
import * as ImageActions from '@/actions/App/Http/Controllers/ImageController';

type Image = {
    id: number;
    url: string;
    original_name: string;
    filename: string;
    width?: number | null;
    height?: number | null;
};

type HeroSlide = {
    id: number;
    image_id: number;
    image_url?: string | null;
    title: string;
    subtitle?: string | null;
    price: string;
    bedrooms?: number | null;
    bathrooms?: number | null;
    area?: string | null;
    neighborhood?: string | null;
    is_new?: boolean;
    is_published?: boolean;
    position?: number;
};

type FeaturedProperty = {
    id: number;
    image_id: number;
    image_url?: string | null;
    title: string;
    neighborhood?: string | null;
    price: string;
    bedrooms?: number | null;
    bathrooms?: number | null;
    area?: string | null;
    type?: string | null;
    features?: string[];
    price_range?: string | null;
    is_new?: boolean;
    is_published?: boolean;
    position?: number;
};

const breadcrumbs: BreadcrumbItem[] = [{ title: 'Painel', href: '/painel' }];

const getCsrf = () => (document.querySelector('meta[name="csrf-token"]') as HTMLMetaElement | null)?.content ?? '';

async function apiFetch<T = unknown>(def: { url: string; method?: string }, init?: RequestInit): Promise<T> {
    const method = (def.method ?? 'get').toUpperCase();
    const headers = new Headers(init?.headers);
    if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method)) {
        if (!headers.has('X-CSRF-TOKEN')) headers.set('X-CSRF-TOKEN', getCsrf());
    }
    const res = await fetch(def.url, {
        method,
        credentials: 'same-origin',
        ...init,
        headers,
    });
    if (!res.ok) {
        const text = await res.text();
        throw new Error(text || `HTTP ${res.status}`);
    }
    const ct = res.headers.get('content-type') || '';
    return (ct.includes('application/json') ? res.json() : (null as unknown)) as T;
}

export default function Painel() {
    // Imagens
    const [images, setImages] = useState<Image[]>([]);
    const [isUploading, setIsUploading] = useState(false);
    const [files, setFiles] = useState<FileList | null>(null);

    // Slides
    const [slides, setSlides] = useState<HeroSlide[]>([]);
    const [creatingSlide, setCreatingSlide] = useState(false);
    const [newSlide, setNewSlide] = useState<Partial<HeroSlide>>({});
    const [imagesLoading, setImagesLoading] = useState(false);
    const [slidesLoading, setSlidesLoading] = useState(false);
    const [editingSlideId, setEditingSlideId] = useState<number | null>(null);
    const [editingSlide, setEditingSlide] = useState<Partial<HeroSlide>>({});
    const [savingSlide, setSavingSlide] = useState(false);

    // Destaques
    const [featured, setFeatured] = useState<FeaturedProperty[]>([]);
    const [creatingFeatured, setCreatingFeatured] = useState(false);
    const [newFeatured, setNewFeatured] = useState<Partial<FeaturedProperty>>({ features: [] });
    const [featureInput, setFeatureInput] = useState('');
    const [featuredLoading, setFeaturedLoading] = useState(false);
    const [editingFeaturedId, setEditingFeaturedId] = useState<number | null>(null);
    const [editingFeatured, setEditingFeatured] = useState<Partial<FeaturedProperty>>({});
    const [savingFeatured, setSavingFeatured] = useState(false);

    const [heroModalOpen, setHeroModalOpen] = useState(false);
    const [featuredModalOpen, setFeaturedModalOpen] = useState(false);

    // Image picker dialog
    const [imagePickerOpen, setImagePickerOpen] = useState(false);
    const [imagePickerFor, setImagePickerFor] = useState<'slide' | 'featured' | null>(null);

    // Notices
    const [notice, setNotice] = useState<{ type: 'success' | 'error'; title: string; message?: string } | null>(null);
    // Tabs: imagens | publicacoes
    const [tab, setTab] = useState<'images' | 'publicacoes'>('publicacoes');

    useEffect(() => {
        refreshAll();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // Garante tema claro nesta tela (evita fundo preto do modo dark)
    useEffect(() => {
        try {
            document.documentElement.classList.remove('dark');
        } catch {}
    }, []);

    // Masks and formatters
    const formatCurrencyBRLInput = (value: string) => {
        const digits = value.replace(/\D/g, '');
        if (!digits) return '';
        const number = Number(digits) / 100;
        try {
            return number.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        } catch {
            return `R$ ${number.toFixed(2)}`;
        }
    };

    const formatAreaM2Input = (value: string) => {
        // Mantém apenas dígitos e formata com separador de milhar (pt-BR)
        const digits = value.replace(/\D/g, '');
        if (!digits) return '';
        const n = parseInt(digits, 10);
        try {
            return `${n.toLocaleString('pt-BR')} m²`;
        } catch {
            // Fallback simples
            return `${n} m²`;
        }
    };

    const refreshAll = async () => {
        await Promise.all([refreshImages(), refreshSlides(), refreshFeatured()]);
    };

    const refreshImages = async () => {
        setImagesLoading(true);
        try {
            const data = await apiFetch<Image[]>(ImageActions.index());
            setImages(data);
        } catch (e) {
            setNotice({ type: 'error', title: 'Falha ao carregar imagens', message: e instanceof Error ? e.message : String(e) });
        } finally {
            setImagesLoading(false);
        }
    };

    const refreshSlides = async () => {
        setSlidesLoading(true);
        try {
            const data = await apiFetch<HeroSlide[]>(HeroActions.index());
            setSlides(data);
        } catch (e) {
            setNotice({ type: 'error', title: 'Falha ao carregar slides', message: e instanceof Error ? e.message : String(e) });
        } finally {
            setSlidesLoading(false);
        }
    };

    const refreshFeatured = async () => {
        setFeaturedLoading(true);
        try {
            const data = await apiFetch<FeaturedProperty[]>(FeaturedActions.index());
            setFeatured(data);
        } catch (e) {
            setNotice({ type: 'error', title: 'Falha ao carregar destaques', message: e instanceof Error ? e.message : String(e) });
        } finally {
            setFeaturedLoading(false);
        }
    };

    const onUpload = async () => {
        if (!files || files.length === 0) return;
        const fd = new FormData();
        Array.from(files).forEach((f) => fd.append('images[]', f));
        setIsUploading(true);
        try {
            await apiFetch(ImageActions.store(), { body: fd });
            setFiles(null);
            await refreshImages();
            setNotice({ type: 'success', title: 'Imagens enviadas com sucesso' });
        } finally {
            setIsUploading(false);
        }
    };

    const deleteImage = async (id: number) => {
        if (!confirm('Excluir esta imagem?')) return;
        await apiFetch(ImageActions.destroy(id));
        await refreshImages();
    };

    const submitSlide = async () => {
        if (!newSlide.image_id || !newSlide.title || !newSlide.price) {
            alert('Selecione uma imagem, título e preço.');
            return;
        }
        setCreatingSlide(true);
        try {
            const body = JSON.stringify({
                image_id: newSlide.image_id,
                title: newSlide.title,
                subtitle: newSlide.subtitle ?? null,
                price: newSlide.price,
                bedrooms: newSlide.bedrooms ?? null,
                bathrooms: newSlide.bathrooms ?? null,
                area: newSlide.area ?? null,
                neighborhood: newSlide.neighborhood ?? null,
                is_new: !!newSlide.is_new,
                is_published: !!newSlide.is_published,
            });
            await apiFetch(HeroActions.store(), {
                body,
                headers: { 'Content-Type': 'application/json' },
            });
            setNewSlide({});
            await refreshSlides();
            setNotice({ type: 'success', title: 'Slide adicionado' });
        } finally {
            setCreatingSlide(false);
        }
    };

    const toggleSlidePublish = async (id: number) => {
        await apiFetch(HeroActions.togglePublish({ heroSlide: id }));
        await refreshSlides();
    };

    const deleteSlide = async (id: number) => {
        if (!confirm('Excluir este slide?')) return;
        await apiFetch(HeroActions.destroy({ heroSlide: id }));
        await refreshSlides();
    };

    const moveSlide = async (id: number, dir: -1 | 1) => {
        const idx = slides.findIndex((s) => s.id === id);
        if (idx < 0) return;
        const target = idx + dir;
        if (target < 0 || target >= slides.length) return;
        const next = slides.slice();
        const [item] = next.splice(idx, 1);
        next.splice(target, 0, item);
        setSlides(next);
        const ids = next.map((s) => s.id);
        await apiFetch(HeroActions.reorder.patch(), {
            body: JSON.stringify({ ids }),
            headers: { 'Content-Type': 'application/json' },
        });
        await refreshSlides();
    };

    const startEditSlide = (s: HeroSlide) => {
        setEditingSlideId(s.id);
        setEditingSlide({ title: s.title, price: s.price });
    };

    const saveEditSlide = async () => {
        if (!editingSlideId) return;
        setSavingSlide(true);
        try {
            await apiFetch(HeroActions.update({ heroSlide: editingSlideId }), {
                body: JSON.stringify({ title: editingSlide.title, price: editingSlide.price }),
                headers: { 'Content-Type': 'application/json' },
            });
            setEditingSlideId(null);
            setEditingSlide({});
            await refreshSlides();
            setNotice({ type: 'success', title: 'Slide atualizado' });
        } finally {
            setSavingSlide(false);
        }
    };

    const submitFeatured = async () => {
        if (!newFeatured.image_id || !newFeatured.title || !newFeatured.price) {
            alert('Selecione uma imagem, título e preço.');
            return;
        }
        setCreatingFeatured(true);
        try {
            const body = JSON.stringify({
                image_id: newFeatured.image_id,
                title: newFeatured.title,
                neighborhood: newFeatured.neighborhood ?? null,
                price: newFeatured.price,
                bedrooms: newFeatured.bedrooms ?? null,
                bathrooms: newFeatured.bathrooms ?? null,
                area: newFeatured.area ?? null,
                type: newFeatured.type ?? null,
                features: newFeatured.features ?? [],
                price_range: newFeatured.price_range ?? null,
                is_new: !!newFeatured.is_new,
                is_published: !!newFeatured.is_published,
            });
            await apiFetch(FeaturedActions.store(), {
                body,
                headers: { 'Content-Type': 'application/json' },
            });
            setNewFeatured({});
            await refreshFeatured();
            setNotice({ type: 'success', title: 'Destaque adicionado' });
        } finally {
            setCreatingFeatured(false);
        }
    };

    const toggleFeaturedPublish = async (id: number) => {
        await apiFetch(FeaturedActions.togglePublish({ featuredProperty: id }));
        await refreshFeatured();
    };

    const deleteFeatured = async (id: number) => {
        if (!confirm('Excluir este destaque?')) return;
        await apiFetch(FeaturedActions.destroy({ featuredProperty: id }));
        await refreshFeatured();
    };

    const moveFeatured = async (id: number, dir: -1 | 1) => {
        const idx = featured.findIndex((s) => s.id === id);
        if (idx < 0) return;
        const target = idx + dir;
        if (target < 0 || target >= featured.length) return;
        const next = featured.slice();
        const [item] = next.splice(idx, 1);
        next.splice(target, 0, item);
        setFeatured(next);
        const ids = next.map((s) => s.id);
        await apiFetch(FeaturedActions.reorder.patch(), {
            body: JSON.stringify({ ids }),
            headers: { 'Content-Type': 'application/json' },
        });
        await refreshFeatured();
    };

    const startEditFeatured = (f: FeaturedProperty) => {
        setEditingFeaturedId(f.id);
        setEditingFeatured({ title: f.title, price: f.price });
    };

    const saveEditFeatured = async () => {
        if (!editingFeaturedId) return;
        setSavingFeatured(true);
        try {
            await apiFetch(FeaturedActions.update({ featuredProperty: editingFeaturedId }), {
                body: JSON.stringify({ title: editingFeatured.title, price: editingFeatured.price }),
                headers: { 'Content-Type': 'application/json' },
            });
            setEditingFeaturedId(null);
            setEditingFeatured({});
            await refreshFeatured();
            setNotice({ type: 'success', title: 'Destaque atualizado' });
        } finally {
            setSavingFeatured(false);
        }
    };

    return (
        <div className="old-site">
            <Head title="Painel" />
            <HeaderStandalone />

            <div className="container-responsive section-spacing flex flex-col gap-6 pt-24">
                {notice && (
                    <Alert variant={notice.type === 'error' ? 'destructive' : 'default'}>
                        <AlertTitle>{notice.title}</AlertTitle>
                        {notice.message && <AlertDescription>{notice.message}</AlertDescription>}
                    </Alert>
                )}
                {/* Tabs */}
                <div className="mb-4 border-b">
                    <div className="flex gap-2">
                        <button
                            type="button"
                            onClick={() => setTab('publicacoes')}
                            className={`-mb-px border-b-2 px-4 py-2 ${tab === 'publicacoes' ? 'border-primary text-primary' : 'border-transparent text-muted-foreground hover:text-foreground'}`}
                        >
                            Publicações
                        </button>
                        <button
                            type="button"
                            onClick={() => setTab('images')}
                            className={`-mb-px border-b-2 px-4 py-2 ${tab === 'images' ? 'border-primary text-primary' : 'border-transparent text-muted-foreground hover:text-foreground'}`}
                        >
                            Imagens
                        </button>
                    </div>
                </div>
                {/* Imagens */}
                {tab === 'images' && (
                    <Card>
                        <CardHeader>
                            <CardTitle>Gerenciar Imagens</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div className="flex flex-col gap-2 sm:flex-row sm:items-end">
                                <div className="flex-1">
                                    <Label htmlFor="images">Enviar imagens (até 20 por vez)</Label>
                                    <Input id="images" type="file" multiple accept="image/*" onChange={(e) => setFiles(e.target.files)} />
                                </div>
                                <div>
                                    <Button onClick={onUpload} disabled={isUploading || !files || files.length === 0}>
                                        {isUploading ? 'Enviando…' : 'Enviar'}
                                    </Button>
                                </div>
                            </div>

                            {images.length > 0 ? (
                                <div className="grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6">
                                    {images.map((img) => (
                                        <div key={img.id} className="group relative overflow-hidden rounded-md border">
                                            <img src={img.url} alt={img.original_name} className="h-36 w-full object-cover" />
                                            <div className="absolute inset-x-0 bottom-0 flex items-center justify-between bg-black/50 p-1 text-xs text-white opacity-0 transition group-hover:opacity-100">
                                                <span className="truncate" title={img.original_name}>
                                                    {img.original_name}
                                                </span>
                                                <button className="rounded bg-red-600 px-2 py-0.5 text-[11px]" onClick={() => deleteImage(img.id)}>
                                                    Excluir
                                                </button>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <p className="text-sm text-muted-foreground">Nenhuma imagem enviada ainda.</p>
                            )}
                        </CardContent>
                    </Card>
                )}

                {/* Hero Slides */}
                {tab === 'publicacoes' && (
                    <>
                        <div className="flex flex-col gap-4">
                            <Button className="w-auto self-start" onClick={() => setHeroModalOpen(true)}>
                                Slides
                            </Button>
                            <Button className="w-auto self-start" onClick={() => setFeaturedModalOpen(true)}>
                                Destaques
                            </Button>
                        </div>

                        <Dialog open={heroModalOpen} onOpenChange={setHeroModalOpen}>
                            <DialogContent className="w-full sm:max-w-5xl">
                                <DialogHeader>
                                    <div className="flex items-center justify-between">
                                        <DialogTitle>Hero Slides</DialogTitle>
                                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                                            <span>{slidesLoading ? 'Carregando…' : `${slides.length} itens`}</span>
                                            <Button
                                                className="w-auto"
                                                variant="secondary"
                                                onClick={refreshSlides}
                                                disabled={slidesLoading}
                                                title="Atualizar"
                                            >
                                                ↻
                                            </Button>
                                        </div>
                                    </div>
                                </DialogHeader>
                                <div className="space-y-4">
                                    <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
                                        <div>
                                            <Label>Imagem</Label>
                                            <div className="mt-2 flex items-center gap-2">
                                                <Dialog
                                                    open={imagePickerOpen && imagePickerFor === 'slide'}
                                                    onOpenChange={(o) => {
                                                        setImagePickerOpen(o);
                                                        if (!o) setImagePickerFor(null);
                                                    }}
                                                >
                                                    <DialogTrigger asChild>
                                                        <Button
                                                            type="button"
                                                            variant="secondary"
                                                            className="w-auto"
                                                            onClick={() => {
                                                                setImagePickerFor('slide');
                                                                setImagePickerOpen(true);
                                                            }}
                                                        >
                                                            Galeria
                                                        </Button>
                                                    </DialogTrigger>
                                                    <DialogContent className="sm:max-w-3xl">
                                                        <DialogHeader>
                                                            <DialogTitle>Escolher imagem</DialogTitle>
                                                        </DialogHeader>
                                                        <div className="grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-4">
                                                            {images.map((img) => (
                                                                <button
                                                                    key={img.id}
                                                                    type="button"
                                                                    className="overflow-hidden rounded-md border focus:ring-2 focus:ring-ring focus:outline-none"
                                                                    onClick={() => {
                                                                        setNewSlide((s) => ({ ...s, image_id: img.id }));
                                                                        setImagePickerOpen(false);
                                                                        setImagePickerFor(null);
                                                                    }}
                                                                >
                                                                    <img src={img.url} alt={img.original_name} className="h-28 w-full object-cover" />
                                                                </button>
                                                            ))}
                                                        </div>
                                                    </DialogContent>
                                                </Dialog>
                                                {newSlide.image_id && (
                                                    <ImagePreview
                                                        src={images.find((i) => i.id === newSlide.image_id)?.url ?? ''}
                                                        titulo={newSlide.title}
                                                        subtitulo={newSlide.subtitle}
                                                        preco={newSlide.price}
                                                        quartos={newSlide.bedrooms}
                                                        banheiros={newSlide.bathrooms}
                                                        area={newSlide.area}
                                                        bairro={newSlide.neighborhood}
                                                    />
                                                )}
                                            </div>
                                        </div>
                                        <div>
                                            <Label>Título</Label>
                                            <Input
                                                value={newSlide.title ?? ''}
                                                onChange={(e) => setNewSlide((s) => ({ ...s, title: e.target.value }))}
                                                placeholder="Ex: Casa moderna no Setor Marista"
                                            />
                                        </div>
                                        <div>
                                            <Label>Subtítulo</Label>
                                            <Input
                                                value={newSlide.subtitle ?? ''}
                                                onChange={(e) => setNewSlide((s) => ({ ...s, subtitle: e.target.value }))}
                                                placeholder="Ex: Próximo ao Flamboyant"
                                            />
                                        </div>
                                        <div>
                                            <Label>Bairro</Label>
                                            <Input
                                                value={newSlide.neighborhood ?? ''}
                                                onChange={(e) => setNewSlide((s) => ({ ...s, neighborhood: e.target.value }))}
                                                placeholder="Ex: Setor Marista"
                                            />
                                        </div>
                                        <div>
                                            <Label>Preço</Label>
                                            <Input
                                                value={newSlide.price ?? ''}
                                                onChange={(e) => setNewSlide((s) => ({ ...s, price: formatCurrencyBRLInput(e.target.value) }))}
                                                inputMode="numeric"
                                                placeholder="Ex: R$ 1.250.000,00"
                                            />
                                        </div>
                                    </div>
                                    <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
                                        <div>
                                            <Label>Quartos</Label>
                                            <Input
                                                type="number"
                                                min={0}
                                                value={newSlide.bedrooms ?? ''}
                                                onChange={(e) => setNewSlide((s) => ({ ...s, bedrooms: Number(e.target.value || 0) }))}
                                                inputMode="numeric"
                                                placeholder="Ex: 3"
                                            />
                                        </div>
                                        <div>
                                            <Label>Banheiros</Label>
                                            <Input
                                                type="number"
                                                min={0}
                                                value={newSlide.bathrooms ?? ''}
                                                onChange={(e) => setNewSlide((s) => ({ ...s, bathrooms: Number(e.target.value || 0) }))}
                                                inputMode="numeric"
                                                placeholder="Ex: 2"
                                            />
                                        </div>
                                        <div>
                                            <Label>Área</Label>
                                            <Input
                                                value={newSlide.area ?? ''}
                                                onChange={(e) => setNewSlide((s) => ({ ...s, area: formatAreaM2Input(e.target.value) }))}
                                                inputMode="numeric"
                                                placeholder="Ex: 120 m²"
                                            />
                                        </div>
                                    </div>
                                    <div className="flex items-center gap-6">
                                        <label className="flex items-center gap-2 text-sm">
                                            <input
                                                type="checkbox"
                                                checked={!!newSlide.is_new}
                                                onChange={(e) => setNewSlide((s) => ({ ...s, is_new: e.target.checked }))}
                                            />
                                            Novo
                                        </label>
                                        <label className="flex items-center gap-2 text-sm">
                                            <input
                                                type="checkbox"
                                                checked={!!newSlide.is_published}
                                                onChange={(e) => setNewSlide((s) => ({ ...s, is_published: e.target.checked }))}
                                            />
                                            Publicado
                                        </label>
                                    </div>
                                    <div>
                                        <Label>Imagem</Label>
                                        <div className="mt-2 flex items-center gap-2">
                                            <Dialog
                                                open={imagePickerOpen && imagePickerFor === 'slide'}
                                                onOpenChange={(o) => {
                                                    setImagePickerOpen(o);
                                                    if (!o) setImagePickerFor(null);
                                                }}
                                            >
                                                <DialogTrigger asChild>
                                                    <Button
                                                        type="button"
                                                        variant="secondary"
                                                        className="w-auto"
                                                        onClick={() => {
                                                            setImagePickerFor('slide');
                                                            setImagePickerOpen(true);
                                                        }}
                                                    >
                                                        Selecionar da galeria
                                                    </Button>
                                                </DialogTrigger>
                                                <DialogContent className="sm:max-w-3xl">
                                                    <DialogHeader>
                                                        <DialogTitle>Escolher imagem</DialogTitle>
                                                    </DialogHeader>
                                                    <div className="grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-4">
                                                        {images.map((img) => (
                                                            <button
                                                                key={img.id}
                                                                type="button"
                                                                className="overflow-hidden rounded-md border focus:ring-2 focus:ring-ring focus:outline-none"
                                                                onClick={() => {
                                                                    setNewSlide((s) => ({ ...s, image_id: img.id }));
                                                                    setImagePickerOpen(false);
                                                                    setImagePickerFor(null);
                                                                }}
                                                            >
                                                                <img src={img.url} alt={img.original_name} className="h-28 w-full object-cover" />
                                                            </button>
                                                        ))}
                                                    </div>
                                                </DialogContent>
                                            </Dialog>
                                            {newSlide.image_id && (
                                                <img
                                                    src={images.find((i) => i.id === newSlide.image_id)?.url}
                                                    alt="Selecionada"
                                                    className="h-10 w-14 rounded object-cover"
                                                />
                                            )}
                                        </div>
                                    </div>
                                    <div className="flex items-end gap-2">
                                        <Button className="w-auto" onClick={submitSlide} disabled={creatingSlide} title="Adicionar Slide">
                                            {creatingSlide ? '…' : '+'}
                                        </Button>
                                    </div>
                                    <div className="grid grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-3">
                                        {slides.map((s) => (
                                            <div key={s.id} className="overflow-hidden rounded-md border">
                                                {s.image_url ? (
                                                    <img src={s.image_url} alt={s.title} className="h-40 w-full object-cover" />
                                                ) : (
                                                    <div className="h-40 w-full bg-muted" />
                                                )}
                                                <div className="flex items-center justify-between gap-2 p-2">
                                                    <div className="min-w-0">
                                                        <div className="truncate font-medium" title={s.title}>
                                                            {s.title}
                                                        </div>
                                                        <div className="text-xs text-muted-foreground">{s.price}</div>
                                                    </div>
                                                    <div className="flex shrink-0 items-center gap-1">
                                                        <Button
                                                            className="w-auto"
                                                            variant="secondary"
                                                            onClick={() => moveSlide(s.id, -1)}
                                                            title="Subir"
                                                        >
                                                            ↑
                                                        </Button>
                                                        <Button
                                                            className="w-auto"
                                                            variant="secondary"
                                                            onClick={() => moveSlide(s.id, 1)}
                                                            title="Descer"
                                                        >
                                                            ↓
                                                        </Button>
                                                        <Button
                                                            className="w-auto"
                                                            variant={s.is_published ? 'default' : 'secondary'}
                                                            onClick={() => toggleSlidePublish(s.id)}
                                                            title="Publicar/Despublicar"
                                                        >
                                                            {s.is_published ? 'Publicado' : 'Rascunho'}
                                                        </Button>
                                                        <Button
                                                            className="w-auto"
                                                            variant="destructive"
                                                            onClick={() => deleteSlide(s.id)}
                                                            title="Excluir"
                                                        >
                                                            Excluir
                                                        </Button>
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                                <DialogFooter>
                                    <Button className="w-auto" variant="secondary" onClick={() => setHeroModalOpen(false)}>
                                        Fechar
                                    </Button>
                                </DialogFooter>
                            </DialogContent>
                        </Dialog>

                        <Dialog open={featuredModalOpen} onOpenChange={setFeaturedModalOpen}>
                            <DialogContent className="w-full sm:max-w-5xl">
                                <DialogHeader>
                                    <div className="flex items-center justify-between">
                                        <DialogTitle>Imóveis em Destaque</DialogTitle>
                                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                                            <span>{featuredLoading ? 'Carregando…' : `${featured.length} itens`}</span>
                                            <Button
                                                className="w-auto"
                                                variant="secondary"
                                                onClick={refreshFeatured}
                                                disabled={featuredLoading}
                                                title="Atualizar"
                                            >
                                                ↻
                                            </Button>
                                        </div>
                                    </div>
                                </DialogHeader>
                                <div className="space-y-4">
                                    <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
                                        <div>
                                            <Label>Imagem</Label>
                                            <div className="mt-2 flex items-center gap-2">
                                                <Dialog
                                                    open={imagePickerOpen && imagePickerFor === 'featured'}
                                                    onOpenChange={(o) => {
                                                        setImagePickerOpen(o);
                                                        if (!o) setImagePickerFor(null);
                                                    }}
                                                >
                                                    <DialogTrigger asChild>
                                                        <Button
                                                            type="button"
                                                            variant="secondary"
                                                            className="w-auto"
                                                            onClick={() => {
                                                                setImagePickerFor('featured');
                                                                setImagePickerOpen(true);
                                                            }}
                                                        >
                                                            Galeria
                                                        </Button>
                                                    </DialogTrigger>
                                                    <DialogContent className="sm:max-w-3xl">
                                                        <DialogHeader>
                                                            <DialogTitle>Escolher imagem</DialogTitle>
                                                        </DialogHeader>
                                                        <div className="grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-4">
                                                            {images.map((img) => (
                                                                <button
                                                                    key={img.id}
                                                                    type="button"
                                                                    className="overflow-hidden rounded-md border focus:ring-2 focus:ring-ring focus:outline-none"
                                                                    onClick={() => {
                                                                        setNewFeatured((s) => ({ ...s, image_id: img.id }));
                                                                        setImagePickerOpen(false);
                                                                        setImagePickerFor(null);
                                                                    }}
                                                                >
                                                                    <img src={img.url} alt={img.original_name} className="h-28 w-full object-cover" />
                                                                </button>
                                                            ))}
                                                        </div>
                                                    </DialogContent>
                                                </Dialog>
                                                {newFeatured.image_id && (
                                                    <ImagePreview
                                                        src={images.find((i) => i.id === newFeatured.image_id)?.url ?? ''}
                                                        titulo={newFeatured.title}
                                                        preco={newFeatured.price}
                                                        quartos={newFeatured.bedrooms}
                                                        banheiros={newFeatured.bathrooms}
                                                        area={newFeatured.area}
                                                        bairro={newFeatured.neighborhood}
                                                    />
                                                )}
                                            </div>
                                        </div>
                                        <div>

                                            <Label>Título</Label>
                                            <Input
                                                value={newFeatured.title ?? ''}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, title: e.target.value }))}
                                                placeholder="Ex: Apartamento premium Jardim Goiás"
                                            />
                                        </div>
                                        <div>
                                            <Label>Bairro</Label>
                                            <Input
                                                value={newFeatured.neighborhood ?? ''}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, neighborhood: e.target.value }))}
                                                placeholder="Ex: Jardim Goiás"
                                            />
                                        </div>
                                        <div>
                                            <Label>Preço</Label>
                                            <Input
                                                value={newFeatured.price ?? ''}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, price: formatCurrencyBRLInput(e.target.value) }))}
                                                inputMode="numeric"
                                                placeholder="Ex: R$ 950.000,00"
                                            />
                                        </div>
                                    </div>
                                    <div className="grid grid-cols-1 gap-4 md:grid-cols-3 lg:grid-cols-5">
                                        <div>
                                            <Label>Quartos</Label>
                                            <Input
                                                type="number"
                                                min={0}
                                                value={newFeatured.bedrooms ?? ''}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, bedrooms: Number(e.target.value || 0) }))}
                                                inputMode="numeric"
                                                placeholder="Ex: 3"
                                            />
                                        </div>
                                        <div>
                                            <Label>Banheiros</Label>
                                            <Input
                                                type="number"
                                                min={0}
                                                value={newFeatured.bathrooms ?? ''}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, bathrooms: Number(e.target.value || 0) }))}
                                                inputMode="numeric"
                                                placeholder="Ex: 2"
                                            />
                                        </div>
                                        <div>
                                            <Label>Área</Label>
                                            <Input
                                                value={newFeatured.area ?? ''}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, area: formatAreaM2Input(e.target.value) }))}
                                                inputMode="numeric"
                                                placeholder="Ex: 120 m²"
                                            />
                                        </div>
                                        <div>
                                            <Label>Tipo</Label>
                                            <select
                                                className="mt-1 w-full rounded-md border bg-background p-2"
                                                value={newFeatured.type ?? ''}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, type: e.target.value }))}
                                            >
                                                <option value="">Selecione…</option>
                                                <option value="casa">Casa</option>
                                                <option value="apartamento">Apartamento</option>
                                                <option value="sobrado">Sobrado</option>
                                                <option value="cobertura">Cobertura</option>
                                            </select>
                                        </div>
                                        <div>
                                            <Label>Faixa de preço</Label>
                                            <Input
                                                value={newFeatured.price_range ?? ''}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, price_range: e.target.value }))}
                                                placeholder="Ex: 800000-1200000"
                                            />
                                        </div>
                                    </div>
                                    <div className="flex items-center gap-6">
                                        <label className="flex items-center gap-2 text-sm">
                                            <input
                                                type="checkbox"
                                                checked={!!newFeatured.is_new}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, is_new: e.target.checked }))}
                                            />
                                            Novo
                                        </label>
                                        <label className="flex items-center gap-2 text-sm">
                                            <input
                                                type="checkbox"
                                                checked={!!newFeatured.is_published}
                                                onChange={(e) => setNewFeatured((s) => ({ ...s, is_published: e.target.checked }))}
                                            />
                                            Publicado
                                        </label>
                                    </div>
                                    <div>
                                        <Label>Características (features)</Label>
                                        <div className="mt-2 flex items-center gap-2">
                                            <Input value={featureInput} onChange={(e) => setFeatureInput(e.target.value)} placeholder="Ex: Piscina" />
                                            <Button
                                                type="button"
                                                variant="secondary"
                                                className="w-auto"
                                                onClick={() => {
                                                    const v = featureInput.trim();
                                                    if (!v) return;
                                                    setNewFeatured((s) => ({ ...s, features: [...(s.features ?? []), v] }));
                                                    setFeatureInput('');
                                                }}
                                                title="Adicionar"
                                            >
                                                +
                                            </Button>
                                        </div>
                                        {(newFeatured.features ?? []).length > 0 && (
                                            <div className="mt-2 flex flex-wrap gap-2">
                                                {(newFeatured.features ?? []).map((f, idx) => (
                                                    <span
                                                        key={`${f}-${idx}`}
                                                        className="inline-flex items-center gap-1 rounded-full bg-muted px-2 py-1 text-xs"
                                                    >
                                                        {f}
                                                        <button
                                                            type="button"
                                                            className="text-muted-foreground hover:text-foreground"
                                                            onClick={() =>
                                                                setNewFeatured((s) => ({
                                                                    ...s,
                                                                    features: (s.features ?? []).filter((_, i) => i !== idx),
                                                                }))
                                                            }
                                                        >
                                                            ×
                                                        </button>
                                                    </span>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                    <div>
                                        <Label>Imagem</Label>
                                        <div className="mt-2 flex items-center gap-2">
                                            <Dialog
                                                open={imagePickerOpen && imagePickerFor === 'featured'}
                                                onOpenChange={(o) => {
                                                    setImagePickerOpen(o);
                                                    if (!o) setImagePickerFor(null);
                                                }}
                                            >
                                                <DialogTrigger asChild>
                                                    <Button
                                                        type="button"
                                                        variant="secondary"
                                                        className="w-auto"
                                                        onClick={() => {
                                                            setImagePickerFor('featured');
                                                            setImagePickerOpen(true);
                                                        }}
                                                    >
                                                        Selecionar da galeria
                                                    </Button>
                                                </DialogTrigger>
                                                <DialogContent className="sm:max-w-3xl">
                                                    <DialogHeader>
                                                        <DialogTitle>Escolher imagem</DialogTitle>
                                                    </DialogHeader>
                                                    <div className="grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-4">
                                                        {images.map((img) => (
                                                            <button
                                                                key={img.id}
                                                                type="button"
                                                                className="overflow-hidden rounded-md border focus:ring-2 focus:ring-ring focus:outline-none"
                                                                onClick={() => {
                                                                    setNewFeatured((s) => ({ ...s, image_id: img.id }));
                                                                    setImagePickerOpen(false);
                                                                    setImagePickerFor(null);
                                                                }}
                                                            >
                                                                <img src={img.url} alt={img.original_name} className="h-28 w-full object-cover" />
                                                            </button>
                                                        ))}
                                                    </div>
                                                </DialogContent>
                                            </Dialog>
                                            {newFeatured.image_id && (
                                                <img
                                                    src={images.find((i) => i.id === newFeatured.image_id)?.url}
                                                    alt="Selecionada"
                                                    className="h-10 w-14 rounded object-cover"
                                                />
                                            )}
                                        </div>
                                    </div>
                                    <div className="flex items-end gap-2">
                                        <Button className="w-auto" onClick={submitFeatured} disabled={creatingFeatured} title="Adicionar Destaque">
                                            {creatingFeatured ? '…' : '+'}
                                        </Button>
                                    </div>
                                    <div className="grid grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-3">
                                        {featured.map((f) => (
                                            <div key={f.id} className="overflow-hidden rounded-md border">
                                                {f.image_url ? (
                                                    <img src={f.image_url} alt={f.title} className="h-40 w-full object-cover" />
                                                ) : (
                                                    <div className="h-40 w-full bg-muted" />
                                                )}
                                                <div className="flex items-center justify-between gap-2 p-2">
                                                    <div className="min-w-0">
                                                        <div className="truncate font-medium" title={f.title}>
                                                            {f.title}
                                                        </div>
                                                        <div className="text-xs text-muted-foreground">{f.price}</div>
                                                    </div>
                                                    <div className="flex shrink-0 items-center gap-1">
                                                        <Button
                                                            className="w-auto"
                                                            variant="secondary"
                                                            onClick={() => moveFeatured(f.id, -1)}
                                                            title="Subir"
                                                        >
                                                            ↑
                                                        </Button>
                                                        <Button
                                                            className="w-auto"
                                                            variant="secondary"
                                                            onClick={() => moveFeatured(f.id, 1)}
                                                            title="Descer"
                                                        >
                                                            ↓
                                                        </Button>
                                                        <Button
                                                            className="w-auto"
                                                            variant={f.is_published ? 'default' : 'secondary'}
                                                            onClick={() => toggleFeaturedPublish(f.id)}
                                                            title="Publicar/Despublicar"
                                                        >
                                                            {f.is_published ? 'Publicado' : 'Rascunho'}
                                                        </Button>
                                                        <Button
                                                            className="w-auto"
                                                            variant="destructive"
                                                            onClick={() => deleteFeatured(f.id)}
                                                            title="Excluir"
                                                        >
                                                            Excluir
                                                        </Button>
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                                <DialogFooter>
                                    <Button className="w-auto" variant="secondary" onClick={() => setFeaturedModalOpen(false)}>
                                        Fechar
                                    </Button>
                                </DialogFooter>
                            </DialogContent>
                        </Dialog>
                    </>
                )}
            </div>
        </div>
    );
}
